<?xml version="1.0" encoding="UTF-8" ?>
<testsuites name="vitest tests" tests="506" failures="0" errors="0" time="0.329671331">
    <testsuite name="tests/fixtures/fixtures.test.ts" timestamp="2025-08-16T13:32:07.348Z" hostname="Mac.JOOWIN" tests="14" failures="0" errors="0" skipped="0" time="0.00337825">
        <testcase classname="tests/fixtures/fixtures.test.ts" name="Test Fixtures &gt; Queue Fixtures &gt; should provide valid queue data" time="0.0011975">
        </testcase>
        <testcase classname="tests/fixtures/fixtures.test.ts" name="Test Fixtures &gt; Queue Fixtures &gt; should validate queue fixture structure" time="0.00014125">
        </testcase>
        <testcase classname="tests/fixtures/fixtures.test.ts" name="Test Fixtures &gt; Queue Fixtures &gt; should create custom queues" time="0.000082">
        </testcase>
        <testcase classname="tests/fixtures/fixtures.test.ts" name="Test Fixtures &gt; Agent Fixtures &gt; should provide valid agent data" time="0.00011225">
        </testcase>
        <testcase classname="tests/fixtures/fixtures.test.ts" name="Test Fixtures &gt; Agent Fixtures &gt; should validate agent fixture structure" time="0.000069708">
        </testcase>
        <testcase classname="tests/fixtures/fixtures.test.ts" name="Test Fixtures &gt; Agent Fixtures &gt; should create custom agents" time="0.000150167">
        </testcase>
        <testcase classname="tests/fixtures/fixtures.test.ts" name="Test Fixtures &gt; Agent Fixtures &gt; should filter agents by name" time="0.000088083">
        </testcase>
        <testcase classname="tests/fixtures/fixtures.test.ts" name="Test Fixtures &gt; Agent Fixtures &gt; should filter agents by status" time="0.000090834">
        </testcase>
        <testcase classname="tests/fixtures/fixtures.test.ts" name="Test Fixtures &gt; Build Fixtures &gt; should provide valid build data" time="0.00009475">
        </testcase>
        <testcase classname="tests/fixtures/fixtures.test.ts" name="Test Fixtures &gt; Build Fixtures &gt; should validate build fixture structure" time="0.000061875">
        </testcase>
        <testcase classname="tests/fixtures/fixtures.test.ts" name="Test Fixtures &gt; Pipeline Fixtures &gt; should provide valid pipeline run data" time="0.000068334">
        </testcase>
        <testcase classname="tests/fixtures/fixtures.test.ts" name="Test Fixtures &gt; Fixture Utilities &gt; should clone fixtures without mutation" time="0.000063">
        </testcase>
        <testcase classname="tests/fixtures/fixtures.test.ts" name="Test Fixtures &gt; Fixture Utilities &gt; should create paged responses" time="0.000274125">
        </testcase>
        <testcase classname="tests/fixtures/fixtures.test.ts" name="Test Fixtures &gt; Fixture Utilities &gt; should handle last page correctly" time="0.000111958">
        </testcase>
    </testsuite>
    <testsuite name="tests/helpers/mcp-test-utils-usage-example.test.ts" timestamp="2025-08-16T13:32:07.349Z" hostname="Mac.JOOWIN" tests="12" failures="0" errors="0" skipped="0" time="0.007636833">
        <testcase classname="tests/helpers/mcp-test-utils-usage-example.test.ts" name="MCP Test Utilities Usage Examples &gt; Basic Server Testing &gt; should demonstrate how to test server tool registration" time="0.00298425">
        </testcase>
        <testcase classname="tests/helpers/mcp-test-utils-usage-example.test.ts" name="MCP Test Utilities Usage Examples &gt; Basic Server Testing &gt; should demonstrate how to test tool execution with mocked responses" time="0.001180542">
        </testcase>
        <testcase classname="tests/helpers/mcp-test-utils-usage-example.test.ts" name="MCP Test Utilities Usage Examples &gt; Basic Server Testing &gt; should demonstrate how to test error scenarios" time="0.000375417">
        </testcase>
        <testcase classname="tests/helpers/mcp-test-utils-usage-example.test.ts" name="MCP Test Utilities Usage Examples &gt; Message Factory Usage &gt; should demonstrate creating various MCP messages" time="0.000564917">
        </testcase>
        <testcase classname="tests/helpers/mcp-test-utils-usage-example.test.ts" name="MCP Test Utilities Usage Examples &gt; Message Factory Usage &gt; should demonstrate creating invalid requests for error testing" time="0.000148417">
        </testcase>
        <testcase classname="tests/helpers/mcp-test-utils-usage-example.test.ts" name="MCP Test Utilities Usage Examples &gt; Response Validation Usage &gt; should demonstrate validating different response types" time="0.0001155">
        </testcase>
        <testcase classname="tests/helpers/mcp-test-utils-usage-example.test.ts" name="MCP Test Utilities Usage Examples &gt; Response Validation Usage &gt; should demonstrate validating tool responses" time="0.000139583">
        </testcase>
        <testcase classname="tests/helpers/mcp-test-utils-usage-example.test.ts" name="MCP Test Utilities Usage Examples &gt; Response Validation Usage &gt; should demonstrate validating tool parameters" time="0.000121042">
        </testcase>
        <testcase classname="tests/helpers/mcp-test-utils-usage-example.test.ts" name="MCP Test Utilities Usage Examples &gt; Environment Management Usage &gt; should demonstrate environment setup and cleanup" time="0.000099125">
        </testcase>
        <testcase classname="tests/helpers/mcp-test-utils-usage-example.test.ts" name="MCP Test Utilities Usage Examples &gt; Environment Management Usage &gt; should demonstrate automatic environment cleanup" time="0.00014475">
        </testcase>
        <testcase classname="tests/helpers/mcp-test-utils-usage-example.test.ts" name="MCP Test Utilities Usage Examples &gt; Assertion Helpers Usage &gt; should demonstrate using assertion helpers" time="0.000490209">
        </testcase>
        <testcase classname="tests/helpers/mcp-test-utils-usage-example.test.ts" name="MCP Test Utilities Usage Examples &gt; Integration Testing Pattern &gt; should demonstrate a complete integration test pattern" time="0.000462125">
        </testcase>
    </testsuite>
    <testsuite name="tests/helpers/mcp-test-utils.test.ts" timestamp="2025-08-16T13:32:07.350Z" hostname="Mac.JOOWIN" tests="50" failures="0" errors="0" skipped="0" time="0.009870541">
        <testcase classname="tests/helpers/mcp-test-utils.test.ts" name="MCP Test Utilities &gt; MCPServerTestFactory &gt; should create a test server with default configuration" time="0.002238667">
        </testcase>
        <testcase classname="tests/helpers/mcp-test-utils.test.ts" name="MCP Test Utilities &gt; MCPServerTestFactory &gt; should create a mocked server" time="0.000703083">
        </testcase>
        <testcase classname="tests/helpers/mcp-test-utils.test.ts" name="MCP Test Utilities &gt; MCPServerTestFactory &gt; should create an integration server" time="0.000381333">
        </testcase>
        <testcase classname="tests/helpers/mcp-test-utils.test.ts" name="MCP Test Utilities &gt; MCPServerTestFactory &gt; should accept custom configuration" time="0.000919208">
        </testcase>
        <testcase classname="tests/helpers/mcp-test-utils.test.ts" name="MCP Test Utilities &gt; MCPMessageFactory &gt; should create ListTools request" time="0.000591416">
        </testcase>
        <testcase classname="tests/helpers/mcp-test-utils.test.ts" name="MCP Test Utilities &gt; MCPMessageFactory &gt; should create CallTool request" time="0.000181125">
        </testcase>
        <testcase classname="tests/helpers/mcp-test-utils.test.ts" name="MCP Test Utilities &gt; MCPMessageFactory &gt; should create CallTool request without arguments" time="0.000059666">
        </testcase>
        <testcase classname="tests/helpers/mcp-test-utils.test.ts" name="MCP Test Utilities &gt; MCPMessageFactory &gt; should create batch tool calls" time="0.000543708">
        </testcase>
        <testcase classname="tests/helpers/mcp-test-utils.test.ts" name="MCP Test Utilities &gt; MCPMessageFactory &gt; should create invalid tool request" time="0.000061292">
        </testcase>
        <testcase classname="tests/helpers/mcp-test-utils.test.ts" name="MCP Test Utilities &gt; MCPMessageFactory &gt; should create malformed request" time="0.000121042">
        </testcase>
        <testcase classname="tests/helpers/mcp-test-utils.test.ts" name="MCP Test Utilities &gt; MCPMessageFactory &gt; should create common tool calls" time="0.00011575">
        </testcase>
        <testcase classname="tests/helpers/mcp-test-utils.test.ts" name="MCP Test Utilities &gt; MCPMessageFactory &gt; should generate unique request IDs" time="0.000136417">
        </testcase>
        <testcase classname="tests/helpers/mcp-test-utils.test.ts" name="MCP Test Utilities &gt; MCPResponseValidator &gt; validateJSONRPCResponse &gt; should validate valid JSON-RPC response" time="0.000074625">
        </testcase>
        <testcase classname="tests/helpers/mcp-test-utils.test.ts" name="MCP Test Utilities &gt; MCPResponseValidator &gt; validateJSONRPCResponse &gt; should reject response without jsonrpc field" time="0.000050084">
        </testcase>
        <testcase classname="tests/helpers/mcp-test-utils.test.ts" name="MCP Test Utilities &gt; MCPResponseValidator &gt; validateJSONRPCResponse &gt; should reject response with wrong jsonrpc version" time="0.000045333">
        </testcase>
        <testcase classname="tests/helpers/mcp-test-utils.test.ts" name="MCP Test Utilities &gt; MCPResponseValidator &gt; validateJSONRPCResponse &gt; should reject response without id" time="0.000045583">
        </testcase>
        <testcase classname="tests/helpers/mcp-test-utils.test.ts" name="MCP Test Utilities &gt; MCPResponseValidator &gt; validateJSONRPCResponse &gt; should reject response with both result and error" time="0.00005225">
        </testcase>
        <testcase classname="tests/helpers/mcp-test-utils.test.ts" name="MCP Test Utilities &gt; MCPResponseValidator &gt; validateJSONRPCResponse &gt; should reject response without result or error" time="0.000047583">
        </testcase>
        <testcase classname="tests/helpers/mcp-test-utils.test.ts" name="MCP Test Utilities &gt; MCPResponseValidator &gt; validateListToolsResponse &gt; should validate valid ListTools response" time="0.00009">
        </testcase>
        <testcase classname="tests/helpers/mcp-test-utils.test.ts" name="MCP Test Utilities &gt; MCPResponseValidator &gt; validateListToolsResponse &gt; should reject response without tools array" time="0.000048917">
        </testcase>
        <testcase classname="tests/helpers/mcp-test-utils.test.ts" name="MCP Test Utilities &gt; MCPResponseValidator &gt; validateCallToolResponse &gt; should validate valid CallTool response" time="0.000069291">
        </testcase>
        <testcase classname="tests/helpers/mcp-test-utils.test.ts" name="MCP Test Utilities &gt; MCPResponseValidator &gt; validateCallToolResponse &gt; should reject response without content array" time="0.00004525">
        </testcase>
        <testcase classname="tests/helpers/mcp-test-utils.test.ts" name="MCP Test Utilities &gt; MCPResponseValidator &gt; validateToolDefinition &gt; should validate valid tool definition" time="0.000049542">
        </testcase>
        <testcase classname="tests/helpers/mcp-test-utils.test.ts" name="MCP Test Utilities &gt; MCPResponseValidator &gt; validateToolDefinition &gt; should reject tool without name" time="0.000046417">
        </testcase>
        <testcase classname="tests/helpers/mcp-test-utils.test.ts" name="MCP Test Utilities &gt; MCPResponseValidator &gt; validateToolDefinition &gt; should reject tool without description" time="0.000046667">
        </testcase>
        <testcase classname="tests/helpers/mcp-test-utils.test.ts" name="MCP Test Utilities &gt; MCPResponseValidator &gt; validateToolDefinition &gt; should reject tool without inputSchema" time="0.000042542">
        </testcase>
        <testcase classname="tests/helpers/mcp-test-utils.test.ts" name="MCP Test Utilities &gt; MCPResponseValidator &gt; validateToolResponseContent &gt; should validate successful tool response" time="0.000071083">
        </testcase>
        <testcase classname="tests/helpers/mcp-test-utils.test.ts" name="MCP Test Utilities &gt; MCPResponseValidator &gt; validateToolResponseContent &gt; should validate error tool response" time="0.000050292">
        </testcase>
        <testcase classname="tests/helpers/mcp-test-utils.test.ts" name="MCP Test Utilities &gt; MCPResponseValidator &gt; validateToolResponseContent &gt; should reject response without content array" time="0.000042209">
        </testcase>
        <testcase classname="tests/helpers/mcp-test-utils.test.ts" name="MCP Test Utilities &gt; MCPResponseValidator &gt; validateToolResponseContent &gt; should reject response with empty content array" time="0.000046334">
        </testcase>
        <testcase classname="tests/helpers/mcp-test-utils.test.ts" name="MCP Test Utilities &gt; MCPResponseValidator &gt; parseToolResponseData &gt; should parse successful response data" time="0.000068792">
        </testcase>
        <testcase classname="tests/helpers/mcp-test-utils.test.ts" name="MCP Test Utilities &gt; MCPResponseValidator &gt; parseToolResponseData &gt; should parse error response data" time="0.000055916">
        </testcase>
        <testcase classname="tests/helpers/mcp-test-utils.test.ts" name="MCP Test Utilities &gt; MCPResponseValidator &gt; parseToolResponseData &gt; should throw on invalid response" time="0.000321208">
        </testcase>
        <testcase classname="tests/helpers/mcp-test-utils.test.ts" name="MCP Test Utilities &gt; MCPResponseValidator &gt; validateUniqueToolNames &gt; should validate tools with unique names" time="0.000068125">
        </testcase>
        <testcase classname="tests/helpers/mcp-test-utils.test.ts" name="MCP Test Utilities &gt; MCPResponseValidator &gt; validateUniqueToolNames &gt; should reject tools with duplicate names" time="0.00004975">
        </testcase>
        <testcase classname="tests/helpers/mcp-test-utils.test.ts" name="MCP Test Utilities &gt; MCPResponseValidator &gt; validateToolParameters &gt; should validate parameters matching schema" time="0.000091459">
        </testcase>
        <testcase classname="tests/helpers/mcp-test-utils.test.ts" name="MCP Test Utilities &gt; MCPResponseValidator &gt; validateToolParameters &gt; should reject parameters missing required fields" time="0.000050292">
        </testcase>
        <testcase classname="tests/helpers/mcp-test-utils.test.ts" name="MCP Test Utilities &gt; MCPTestEnvironment &gt; should set up test environment variables" time="0.000089209">
        </testcase>
        <testcase classname="tests/helpers/mcp-test-utils.test.ts" name="MCP Test Utilities &gt; MCPTestEnvironment &gt; should restore original environment" time="0.000060417">
        </testcase>
        <testcase classname="tests/helpers/mcp-test-utils.test.ts" name="MCP Test Utilities &gt; MCPTestEnvironment &gt; should work with withTestEnvironment helper" time="0.000087208">
        </testcase>
        <testcase classname="tests/helpers/mcp-test-utils.test.ts" name="MCP Test Utilities &gt; MCPAssertions &gt; should assert valid ListTools response" time="0.000091667">
        </testcase>
        <testcase classname="tests/helpers/mcp-test-utils.test.ts" name="MCP Test Utilities &gt; MCPAssertions &gt; should assert valid CallTool response" time="0.000076792">
        </testcase>
        <testcase classname="tests/helpers/mcp-test-utils.test.ts" name="MCP Test Utilities &gt; MCPAssertions &gt; should assert tool success" time="0.000074375">
        </testcase>
        <testcase classname="tests/helpers/mcp-test-utils.test.ts" name="MCP Test Utilities &gt; MCPAssertions &gt; should assert tool failure" time="0.000069792">
        </testcase>
        <testcase classname="tests/helpers/mcp-test-utils.test.ts" name="MCP Test Utilities &gt; MCPAssertions &gt; should throw on tool success when expecting failure" time="0.000066667">
        </testcase>
        <testcase classname="tests/helpers/mcp-test-utils.test.ts" name="MCP Test Utilities &gt; MCPAssertions &gt; should throw on tool failure when expecting success" time="0.000069125">
        </testcase>
        <testcase classname="tests/helpers/mcp-test-utils.test.ts" name="MCP Test Utilities &gt; MCPAssertions &gt; should assert tool exists" time="0.000077417">
        </testcase>
        <testcase classname="tests/helpers/mcp-test-utils.test.ts" name="MCP Test Utilities &gt; MCPAssertions &gt; should throw when tool does not exist" time="0.000061458">
        </testcase>
        <testcase classname="tests/helpers/mcp-test-utils.test.ts" name="MCP Test Utilities &gt; MCPAssertions &gt; should assert all tools exist" time="0.000073208">
        </testcase>
        <testcase classname="tests/helpers/mcp-test-utils.test.ts" name="MCP Test Utilities &gt; MCPAssertions &gt; should throw when not all tools exist" time="0.000064833">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/config.test.ts" timestamp="2025-08-16T13:32:07.352Z" hostname="Mac.JOOWIN" tests="20" failures="0" errors="0" skipped="0" time="0.008630667">
        <testcase classname="tests/unit/config.test.ts" name="Config Validation &gt; Valid Configuration Scenarios &gt; should validate config with all required environment variables" time="0.001175083">
        </testcase>
        <testcase classname="tests/unit/config.test.ts" name="Config Validation &gt; Valid Configuration Scenarios &gt; should use custom log level when provided" time="0.00020875">
        </testcase>
        <testcase classname="tests/unit/config.test.ts" name="Config Validation &gt; Valid Configuration Scenarios &gt; should handle organization URL with trailing slash" time="0.000137166">
        </testcase>
        <testcase classname="tests/unit/config.test.ts" name="Config Validation &gt; Valid Configuration Scenarios &gt; should handle organization URL that already has https prefix" time="0.000280209">
        </testcase>
        <testcase classname="tests/unit/config.test.ts" name="Config Validation &gt; Valid Configuration Scenarios &gt; should handle organization URL with https prefix and trailing slash" time="0.000181666">
        </testcase>
        <testcase classname="tests/unit/config.test.ts" name="Config Validation &gt; Valid Configuration Scenarios &gt; should handle custom Azure DevOps server URL" time="0.000274125">
        </testcase>
        <testcase classname="tests/unit/config.test.ts" name="Config Validation &gt; Invalid Configuration Scenarios &gt; should throw error when ADO_ORGANIZATION is missing" time="0.002273041">
        </testcase>
        <testcase classname="tests/unit/config.test.ts" name="Config Validation &gt; Invalid Configuration Scenarios &gt; should throw error when ADO_PROJECT is missing" time="0.000192833">
        </testcase>
        <testcase classname="tests/unit/config.test.ts" name="Config Validation &gt; Invalid Configuration Scenarios &gt; should throw error when ADO_PAT is missing" time="0.000227041">
        </testcase>
        <testcase classname="tests/unit/config.test.ts" name="Config Validation &gt; Invalid Configuration Scenarios &gt; should throw error with all missing variables listed" time="0.000146875">
        </testcase>
        <testcase classname="tests/unit/config.test.ts" name="Config Validation &gt; Invalid Configuration Scenarios &gt; should throw error when ADO_ORGANIZATION is empty string" time="0.000140083">
        </testcase>
        <testcase classname="tests/unit/config.test.ts" name="Config Validation &gt; Invalid Configuration Scenarios &gt; should throw error when ADO_PROJECT is empty string" time="0.000402167">
        </testcase>
        <testcase classname="tests/unit/config.test.ts" name="Config Validation &gt; Invalid Configuration Scenarios &gt; should throw error when ADO_PAT is empty string" time="0.001092542">
        </testcase>
        <testcase classname="tests/unit/config.test.ts" name="Config Validation &gt; URL Normalization Logic &gt; should normalize simple organization name" time="0.000178041">
        </testcase>
        <testcase classname="tests/unit/config.test.ts" name="Config Validation &gt; URL Normalization Logic &gt; should normalize organization name with multiple trailing slashes" time="0.000135666">
        </testcase>
        <testcase classname="tests/unit/config.test.ts" name="Config Validation &gt; URL Normalization Logic &gt; should preserve custom domain URLs" time="0.000121625">
        </testcase>
        <testcase classname="tests/unit/config.test.ts" name="Config Validation &gt; URL Normalization Logic &gt; should handle organization names with special characters" time="0.000119625">
        </testcase>
        <testcase classname="tests/unit/config.test.ts" name="Config Validation &gt; URL Normalization Logic &gt; should handle organization names with spaces (URL encoded)" time="0.0001155">
        </testcase>
        <testcase classname="tests/unit/config.test.ts" name="Config Validation &gt; Configuration Cleanup &gt; should handle whitespace in configuration values as-is" time="0.000145625">
        </testcase>
        <testcase classname="tests/unit/config.test.ts" name="Config Validation &gt; Type Safety &gt; should return Config interface with correct types" time="0.000142917">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/example.test.ts" timestamp="2025-08-16T13:32:07.353Z" hostname="Mac.JOOWIN" tests="2" failures="0" errors="0" skipped="0" time="0.00155825">
        <testcase classname="tests/unit/example.test.ts" name="Testing Infrastructure &gt; should be properly configured" time="0.00073">
        </testcase>
        <testcase classname="tests/unit/example.test.ts" name="Testing Infrastructure &gt; should have access to test utilities" time="0.000103167">
        </testcase>
    </testsuite>
    <testsuite name="tests/integration/mcp-protocol-compliance.test.ts" timestamp="2025-08-16T13:32:07.353Z" hostname="Mac.JOOWIN" tests="27" failures="0" errors="0" skipped="0" time="0.0203755">
        <testcase classname="tests/integration/mcp-protocol-compliance.test.ts" name="MCP Protocol Compliance &gt; ListTools Request Handling and Response Format &gt; should handle ListTools request with correct JSON-RPC format" time="0.002533875">
        </testcase>
        <testcase classname="tests/integration/mcp-protocol-compliance.test.ts" name="MCP Protocol Compliance &gt; ListTools Request Handling and Response Format &gt; should return all tools with valid MCP tool definitions" time="0.001733625">
        </testcase>
        <testcase classname="tests/integration/mcp-protocol-compliance.test.ts" name="MCP Protocol Compliance &gt; ListTools Request Handling and Response Format &gt; should have unique tool names across all tools" time="0.000491667">
        </testcase>
        <testcase classname="tests/integration/mcp-protocol-compliance.test.ts" name="MCP Protocol Compliance &gt; ListTools Request Handling and Response Format &gt; should include all expected tool categories" time="0.000880666">
        </testcase>
        <testcase classname="tests/integration/mcp-protocol-compliance.test.ts" name="MCP Protocol Compliance &gt; ListTools Request Handling and Response Format &gt; should validate tool input schemas are properly structured" time="0.001849042">
        </testcase>
        <testcase classname="tests/integration/mcp-protocol-compliance.test.ts" name="MCP Protocol Compliance &gt; CallTool Request Handling with Valid Parameters &gt; should handle valid CallTool requests for health check" time="0.000443">
        </testcase>
        <testcase classname="tests/integration/mcp-protocol-compliance.test.ts" name="MCP Protocol Compliance &gt; CallTool Request Handling with Valid Parameters &gt; should handle CallTool requests with required parameters" time="0.000710708">
        </testcase>
        <testcase classname="tests/integration/mcp-protocol-compliance.test.ts" name="MCP Protocol Compliance &gt; CallTool Request Handling with Valid Parameters &gt; should handle CallTool requests with optional parameters" time="0.000333333">
        </testcase>
        <testcase classname="tests/integration/mcp-protocol-compliance.test.ts" name="MCP Protocol Compliance &gt; CallTool Request Handling with Valid Parameters &gt; should validate tool parameters against schema" time="0.000269167">
        </testcase>
        <testcase classname="tests/integration/mcp-protocol-compliance.test.ts" name="MCP Protocol Compliance &gt; CallTool Request Handling with Valid Parameters &gt; should return properly formatted tool response content" time="0.000372">
        </testcase>
        <testcase classname="tests/integration/mcp-protocol-compliance.test.ts" name="MCP Protocol Compliance &gt; CallTool Request Handling with Invalid Parameters &gt; should handle CallTool requests for non-existent tools" time="0.000550667">
        </testcase>
        <testcase classname="tests/integration/mcp-protocol-compliance.test.ts" name="MCP Protocol Compliance &gt; CallTool Request Handling with Invalid Parameters &gt; should handle CallTool requests with missing required parameters" time="0.000310458">
        </testcase>
        <testcase classname="tests/integration/mcp-protocol-compliance.test.ts" name="MCP Protocol Compliance &gt; CallTool Request Handling with Invalid Parameters &gt; should handle CallTool requests with invalid parameter types" time="0.000276417">
        </testcase>
        <testcase classname="tests/integration/mcp-protocol-compliance.test.ts" name="MCP Protocol Compliance &gt; CallTool Request Handling with Invalid Parameters &gt; should handle CallTool requests with extra unexpected parameters" time="0.000759125">
        </testcase>
        <testcase classname="tests/integration/mcp-protocol-compliance.test.ts" name="MCP Protocol Compliance &gt; CallTool Request Handling with Invalid Parameters &gt; should handle malformed CallTool requests" time="0.000595708">
        </testcase>
        <testcase classname="tests/integration/mcp-protocol-compliance.test.ts" name="MCP Protocol Compliance &gt; Error Response Format Compliance with MCP Standards &gt; should return properly formatted JSON-RPC error responses" time="0.00035075">
        </testcase>
        <testcase classname="tests/integration/mcp-protocol-compliance.test.ts" name="MCP Protocol Compliance &gt; Error Response Format Compliance with MCP Standards &gt; should handle tool execution errors with proper format" time="0.000407584">
        </testcase>
        <testcase classname="tests/integration/mcp-protocol-compliance.test.ts" name="MCP Protocol Compliance &gt; Error Response Format Compliance with MCP Standards &gt; should validate error response structure" time="0.000272917">
        </testcase>
        <testcase classname="tests/integration/mcp-protocol-compliance.test.ts" name="MCP Protocol Compliance &gt; Error Response Format Compliance with MCP Standards &gt; should reject invalid error response formats" time="0.000297">
        </testcase>
        <testcase classname="tests/integration/mcp-protocol-compliance.test.ts" name="MCP Protocol Compliance &gt; Error Response Format Compliance with MCP Standards &gt; should handle tool-specific error formats" time="0.00118875">
        </testcase>
        <testcase classname="tests/integration/mcp-protocol-compliance.test.ts" name="MCP Protocol Compliance &gt; MCP Protocol Message Validation &gt; should validate JSON-RPC 2.0 message format" time="0.000581167">
        </testcase>
        <testcase classname="tests/integration/mcp-protocol-compliance.test.ts" name="MCP Protocol Compliance &gt; MCP Protocol Message Validation &gt; should generate unique request IDs" time="0.000362625">
        </testcase>
        <testcase classname="tests/integration/mcp-protocol-compliance.test.ts" name="MCP Protocol Compliance &gt; MCP Protocol Message Validation &gt; should create properly formatted batch requests" time="0.000811875">
        </testcase>
        <testcase classname="tests/integration/mcp-protocol-compliance.test.ts" name="MCP Protocol Compliance &gt; MCP Protocol Message Validation &gt; should handle common tool call scenarios" time="0.000416042">
        </testcase>
        <testcase classname="tests/integration/mcp-protocol-compliance.test.ts" name="MCP Protocol Compliance &gt; Response Content Validation &gt; should validate tool response content structure" time="0.000358666">
        </testcase>
        <testcase classname="tests/integration/mcp-protocol-compliance.test.ts" name="MCP Protocol Compliance &gt; Response Content Validation &gt; should ensure all tool responses contain valid JSON" time="0.000579667">
        </testcase>
        <testcase classname="tests/integration/mcp-protocol-compliance.test.ts" name="MCP Protocol Compliance &gt; Response Content Validation &gt; should maintain consistent error response format" time="0.000404458">
        </testcase>
    </testsuite>
    <testsuite name="tests/integration/mcp-server-initialization.test.ts" timestamp="2025-08-16T13:32:07.355Z" hostname="Mac.JOOWIN" tests="24" failures="0" errors="0" skipped="0" time="0.016487416">
        <testcase classname="tests/integration/mcp-server-initialization.test.ts" name="MCP Server Initialization &gt; Server startup with valid configuration &gt; should successfully create server instance with valid config" time="0.005733625">
        </testcase>
        <testcase classname="tests/integration/mcp-server-initialization.test.ts" name="MCP Server Initialization &gt; Server startup with valid configuration &gt; should initialize with cleaned organization URL" time="0.001063417">
        </testcase>
        <testcase classname="tests/integration/mcp-server-initialization.test.ts" name="MCP Server Initialization &gt; Server startup with valid configuration &gt; should handle organization URL with trailing slash" time="0.000448667">
        </testcase>
        <testcase classname="tests/integration/mcp-server-initialization.test.ts" name="MCP Server Initialization &gt; Server startup with valid configuration &gt; should initialize temp manager and perform cleanup on startup" time="0.001412583">
        </testcase>
        <testcase classname="tests/integration/mcp-server-initialization.test.ts" name="MCP Server Initialization &gt; Server startup with valid configuration &gt; should handle cleanup errors gracefully during startup" time="0.000527375">
        </testcase>
        <testcase classname="tests/integration/mcp-server-initialization.test.ts" name="MCP Server Initialization &gt; Server startup with invalid configuration &gt; should throw error when ADO_ORGANIZATION is missing" time="0.000442542">
        </testcase>
        <testcase classname="tests/integration/mcp-server-initialization.test.ts" name="MCP Server Initialization &gt; Server startup with invalid configuration &gt; should throw error when ADO_PROJECT is missing" time="0.00011875">
        </testcase>
        <testcase classname="tests/integration/mcp-server-initialization.test.ts" name="MCP Server Initialization &gt; Server startup with invalid configuration &gt; should throw error when ADO_PAT is missing" time="0.00032425">
        </testcase>
        <testcase classname="tests/integration/mcp-server-initialization.test.ts" name="MCP Server Initialization &gt; Server startup with invalid configuration &gt; should throw error when multiple required fields are missing" time="0.000101042">
        </testcase>
        <testcase classname="tests/integration/mcp-server-initialization.test.ts" name="MCP Server Initialization &gt; Server startup with invalid configuration &gt; should not create server instance with invalid config" time="0.000094667">
        </testcase>
        <testcase classname="tests/integration/mcp-server-initialization.test.ts" name="MCP Server Initialization &gt; Tool registration and discovery &gt; should register all expected tools during initialization" time="0.000546209">
        </testcase>
        <testcase classname="tests/integration/mcp-server-initialization.test.ts" name="MCP Server Initialization &gt; Tool registration and discovery &gt; should register agent management tools" time="0.000250333">
        </testcase>
        <testcase classname="tests/integration/mcp-server-initialization.test.ts" name="MCP Server Initialization &gt; Tool registration and discovery &gt; should register build management tools" time="0.000258292">
        </testcase>
        <testcase classname="tests/integration/mcp-server-initialization.test.ts" name="MCP Server Initialization &gt; Tool registration and discovery &gt; should register file management tools" time="0.000187">
        </testcase>
        <testcase classname="tests/integration/mcp-server-initialization.test.ts" name="MCP Server Initialization &gt; Tool registration and discovery &gt; should have unique tool names" time="0.000216166">
        </testcase>
        <testcase classname="tests/integration/mcp-server-initialization.test.ts" name="MCP Server Initialization &gt; Tool registration and discovery &gt; should have valid tool schemas" time="0.000956083">
        </testcase>
        <testcase classname="tests/integration/mcp-server-initialization.test.ts" name="MCP Server Initialization &gt; Tool registration and discovery &gt; should handle tool discovery through MCP protocol" time="0.00029825">
        </testcase>
        <testcase classname="tests/integration/mcp-server-initialization.test.ts" name="MCP Server Initialization &gt; Server configuration validation &gt; should use default log level when not specified" time="0.000078625">
        </testcase>
        <testcase classname="tests/integration/mcp-server-initialization.test.ts" name="MCP Server Initialization &gt; Server configuration validation &gt; should use custom log level when specified" time="0.000074791">
        </testcase>
        <testcase classname="tests/integration/mcp-server-initialization.test.ts" name="MCP Server Initialization &gt; Server configuration validation &gt; should create server with custom configuration" time="0.00020025">
        </testcase>
        <testcase classname="tests/integration/mcp-server-initialization.test.ts" name="MCP Server Initialization &gt; Server metadata and capabilities &gt; should have correct server metadata" time="0.000203291">
        </testcase>
        <testcase classname="tests/integration/mcp-server-initialization.test.ts" name="MCP Server Initialization &gt; Server metadata and capabilities &gt; should declare tools capability only" time="0.000257541">
        </testcase>
        <testcase classname="tests/integration/mcp-server-initialization.test.ts" name="MCP Server Initialization &gt; Error handling during initialization &gt; should handle client initialization errors gracefully" time="0.000277958">
        </testcase>
        <testcase classname="tests/integration/mcp-server-initialization.test.ts" name="MCP Server Initialization &gt; Error handling during initialization &gt; should handle temp manager initialization failure" time="0.000522167">
        </testcase>
    </testsuite>
    <testsuite name="tests/integration/mcp-tool-execution.test.ts" timestamp="2025-08-16T13:32:07.356Z" hostname="Mac.JOOWIN" tests="27" failures="0" errors="0" skipped="0" time="0.117487417">
        <testcase classname="tests/integration/mcp-tool-execution.test.ts" name="MCP Tool Execution End-to-End Tests &gt; Agent Management Tools E2E &gt; project_health_check &gt; should execute complete MCP request-response flow" time="0.003977834">
        </testcase>
        <testcase classname="tests/integration/mcp-tool-execution.test.ts" name="MCP Tool Execution End-to-End Tests &gt; Agent Management Tools E2E &gt; project_health_check &gt; should validate empty parameters correctly" time="0.00271325">
        </testcase>
        <testcase classname="tests/integration/mcp-tool-execution.test.ts" name="MCP Tool Execution End-to-End Tests &gt; Agent Management Tools E2E &gt; project_list_queues &gt; should execute complete MCP request-response flow" time="0.001258333">
        </testcase>
        <testcase classname="tests/integration/mcp-tool-execution.test.ts" name="MCP Tool Execution End-to-End Tests &gt; Agent Management Tools E2E &gt; project_list_queues &gt; should handle API errors gracefully" time="0.00074825">
        </testcase>
        <testcase classname="tests/integration/mcp-tool-execution.test.ts" name="MCP Tool Execution End-to-End Tests &gt; Agent Management Tools E2E &gt; project_get_queue &gt; should validate required parameters through MCP protocol" time="0.001364042">
        </testcase>
        <testcase classname="tests/integration/mcp-tool-execution.test.ts" name="MCP Tool Execution End-to-End Tests &gt; Agent Management Tools E2E &gt; project_get_queue &gt; should execute with valid parameters" time="0.002017834">
        </testcase>
        <testcase classname="tests/integration/mcp-tool-execution.test.ts" name="MCP Tool Execution End-to-End Tests &gt; Agent Management Tools E2E &gt; org_find_agent &gt; should validate required parameters" time="0.00140025">
        </testcase>
        <testcase classname="tests/integration/mcp-tool-execution.test.ts" name="MCP Tool Execution End-to-End Tests &gt; Agent Management Tools E2E &gt; org_find_agent &gt; should execute with valid parameters" time="0.000851917">
        </testcase>
        <testcase classname="tests/integration/mcp-tool-execution.test.ts" name="MCP Tool Execution End-to-End Tests &gt; Agent Management Tools E2E &gt; org_list_agents &gt; should execute with optional parameters" time="0.002976334">
        </testcase>
        <testcase classname="tests/integration/mcp-tool-execution.test.ts" name="MCP Tool Execution End-to-End Tests &gt; Build Management Tools E2E &gt; build_list &gt; should execute complete MCP request-response flow" time="0.001056708">
        </testcase>
        <testcase classname="tests/integration/mcp-tool-execution.test.ts" name="MCP Tool Execution End-to-End Tests &gt; Build Management Tools E2E &gt; build_list &gt; should validate parameter types" time="0.000811625">
        </testcase>
        <testcase classname="tests/integration/mcp-tool-execution.test.ts" name="MCP Tool Execution End-to-End Tests &gt; Build Management Tools E2E &gt; build_queue &gt; should validate required parameters" time="0.000905833">
        </testcase>
        <testcase classname="tests/integration/mcp-tool-execution.test.ts" name="MCP Tool Execution End-to-End Tests &gt; Build Management Tools E2E &gt; build_queue &gt; should execute with valid parameters" time="0.000930875">
        </testcase>
        <testcase classname="tests/integration/mcp-tool-execution.test.ts" name="MCP Tool Execution End-to-End Tests &gt; Build Management Tools E2E &gt; build_get_timeline &gt; should validate required buildId parameter" time="0.006844208">
        </testcase>
        <testcase classname="tests/integration/mcp-tool-execution.test.ts" name="MCP Tool Execution End-to-End Tests &gt; Build Management Tools E2E &gt; build_get_timeline &gt; should execute with valid buildId" time="0.000905">
        </testcase>
        <testcase classname="tests/integration/mcp-tool-execution.test.ts" name="MCP Tool Execution End-to-End Tests &gt; Build Management Tools E2E &gt; build_download_job_logs &gt; should validate required parameters" time="0.001027833">
        </testcase>
        <testcase classname="tests/integration/mcp-tool-execution.test.ts" name="MCP Tool Execution End-to-End Tests &gt; Build Management Tools E2E &gt; build_download_job_logs &gt; should execute with valid parameters" time="0.004066708">
        </testcase>
        <testcase classname="tests/integration/mcp-tool-execution.test.ts" name="MCP Tool Execution End-to-End Tests &gt; File Management Tools E2E &gt; list_downloads &gt; should execute complete MCP request-response flow" time="0.015964541">
        </testcase>
        <testcase classname="tests/integration/mcp-tool-execution.test.ts" name="MCP Tool Execution End-to-End Tests &gt; File Management Tools E2E &gt; cleanup_downloads &gt; should execute with optional age parameter" time="0.027163416">
        </testcase>
        <testcase classname="tests/integration/mcp-tool-execution.test.ts" name="MCP Tool Execution End-to-End Tests &gt; File Management Tools E2E &gt; cleanup_downloads &gt; should use default age when not specified" time="0.002024375">
        </testcase>
        <testcase classname="tests/integration/mcp-tool-execution.test.ts" name="MCP Tool Execution End-to-End Tests &gt; File Management Tools E2E &gt; get_download_location &gt; should execute complete MCP request-response flow" time="0.004966">
        </testcase>
        <testcase classname="tests/integration/mcp-tool-execution.test.ts" name="MCP Tool Execution End-to-End Tests &gt; Error Propagation and MCP Compliance &gt; should handle unknown tool names with proper MCP error response" time="0.001601625">
        </testcase>
        <testcase classname="tests/integration/mcp-tool-execution.test.ts" name="MCP Tool Execution End-to-End Tests &gt; Error Propagation and MCP Compliance &gt; should validate tool parameters according to schema" time="0.001305583">
        </testcase>
        <testcase classname="tests/integration/mcp-tool-execution.test.ts" name="MCP Tool Execution End-to-End Tests &gt; Error Propagation and MCP Compliance &gt; should maintain MCP response format consistency across all tools" time="0.003190583">
        </testcase>
        <testcase classname="tests/integration/mcp-tool-execution.test.ts" name="MCP Tool Execution End-to-End Tests &gt; Error Propagation and MCP Compliance &gt; should handle API errors gracefully" time="0.009435375">
        </testcase>
        <testcase classname="tests/integration/mcp-tool-execution.test.ts" name="MCP Tool Execution End-to-End Tests &gt; Tool Discovery and Registration &gt; should register all expected tools with valid schemas" time="0.002681458">
        </testcase>
        <testcase classname="tests/integration/mcp-tool-execution.test.ts" name="MCP Tool Execution End-to-End Tests &gt; Tool Discovery and Registration &gt; should provide consistent tool metadata across all tools" time="0.013145209">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/clients/ado-base-client.test.ts" timestamp="2025-08-16T13:32:07.358Z" hostname="Mac.JOOWIN" tests="18" failures="0" errors="0" skipped="0" time="0.013250708">
        <testcase classname="tests/unit/clients/ado-base-client.test.ts" name="AzureDevOpsBaseClient &gt; constructor &gt; should initialize with valid configuration" time="0.002205292">
        </testcase>
        <testcase classname="tests/unit/clients/ado-base-client.test.ts" name="AzureDevOpsBaseClient &gt; constructor &gt; should handle invalid configuration gracefully" time="0.000655042">
        </testcase>
        <testcase classname="tests/unit/clients/ado-base-client.test.ts" name="AzureDevOpsBaseClient &gt; constructor &gt; should create connection with proper auth handler" time="0.000361292">
        </testcase>
        <testcase classname="tests/unit/clients/ado-base-client.test.ts" name="AzureDevOpsBaseClient &gt; handleApiCall &gt; should return success result for successful API call" time="0.000447375">
        </testcase>
        <testcase classname="tests/unit/clients/ado-base-client.test.ts" name="AzureDevOpsBaseClient &gt; handleApiCall &gt; should handle API errors and return error result" time="0.001006542">
        </testcase>
        <testcase classname="tests/unit/clients/ado-base-client.test.ts" name="AzureDevOpsBaseClient &gt; handleApiCall &gt; should handle permission errors correctly" time="0.000309459">
        </testcase>
        <testcase classname="tests/unit/clients/ado-base-client.test.ts" name="AzureDevOpsBaseClient &gt; handleApiCall &gt; should handle not found errors correctly" time="0.000255333">
        </testcase>
        <testcase classname="tests/unit/clients/ado-base-client.test.ts" name="AzureDevOpsBaseClient &gt; handleApiCall &gt; should handle timeout errors correctly" time="0.000274958">
        </testcase>
        <testcase classname="tests/unit/clients/ado-base-client.test.ts" name="AzureDevOpsBaseClient &gt; handleApiCall &gt; should handle authentication errors correctly" time="0.000338666">
        </testcase>
        <testcase classname="tests/unit/clients/ado-base-client.test.ts" name="AzureDevOpsBaseClient &gt; handleApiCall &gt; should pass isOrgLevel parameter to error handler" time="0.001927792">
        </testcase>
        <testcase classname="tests/unit/clients/ado-base-client.test.ts" name="AzureDevOpsBaseClient &gt; handleApiCall &gt; should handle null/undefined API responses" time="0.000759416">
        </testcase>
        <testcase classname="tests/unit/clients/ado-base-client.test.ts" name="AzureDevOpsBaseClient &gt; handleApiCall &gt; should handle empty API responses" time="0.001556541">
        </testcase>
        <testcase classname="tests/unit/clients/ado-base-client.test.ts" name="AzureDevOpsBaseClient &gt; handleApiCall &gt; should handle complex object API responses" time="0.000390625">
        </testcase>
        <testcase classname="tests/unit/clients/ado-base-client.test.ts" name="AzureDevOpsBaseClient &gt; ensureInitialized &gt; should complete without error" time="0.0005485">
        </testcase>
        <testcase classname="tests/unit/clients/ado-base-client.test.ts" name="AzureDevOpsBaseClient &gt; ensureInitialized &gt; should be callable multiple times" time="0.000288084">
        </testcase>
        <testcase classname="tests/unit/clients/ado-base-client.test.ts" name="AzureDevOpsBaseClient &gt; error handling integration &gt; should handle network errors" time="0.000292417">
        </testcase>
        <testcase classname="tests/unit/clients/ado-base-client.test.ts" name="AzureDevOpsBaseClient &gt; error handling integration &gt; should handle malformed response errors" time="0.000314792">
        </testcase>
        <testcase classname="tests/unit/clients/ado-base-client.test.ts" name="AzureDevOpsBaseClient &gt; error handling integration &gt; should handle rate limiting errors" time="0.000269625">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/clients/build-client.test.ts" timestamp="2025-08-16T13:32:07.359Z" hostname="Mac.JOOWIN" tests="35" failures="0" errors="0" skipped="0" time="0.028639959">
        <testcase classname="tests/unit/clients/build-client.test.ts" name="BuildClient &gt; getBuildTimeline &gt; should return timeline for valid build ID" time="0.00220525">
        </testcase>
        <testcase classname="tests/unit/clients/build-client.test.ts" name="BuildClient &gt; getBuildTimeline &gt; should return timeline with specific timeline ID" time="0.000338583">
        </testcase>
        <testcase classname="tests/unit/clients/build-client.test.ts" name="BuildClient &gt; getBuildTimeline &gt; should handle timeline not found" time="0.000240625">
        </testcase>
        <testcase classname="tests/unit/clients/build-client.test.ts" name="BuildClient &gt; getBuildTimeline &gt; should handle API errors" time="0.000246125">
        </testcase>
        <testcase classname="tests/unit/clients/build-client.test.ts" name="BuildClient &gt; getBuilds &gt; should return builds with default options" time="0.000478208">
        </testcase>
        <testcase classname="tests/unit/clients/build-client.test.ts" name="BuildClient &gt; getBuilds &gt; should filter by definition IDs" time="0.000304541">
        </testcase>
        <testcase classname="tests/unit/clients/build-client.test.ts" name="BuildClient &gt; getBuilds &gt; should filter by definition name" time="0.000524333">
        </testcase>
        <testcase classname="tests/unit/clients/build-client.test.ts" name="BuildClient &gt; getBuilds &gt; should return empty when no matching definitions found" time="0.000343375">
        </testcase>
        <testcase classname="tests/unit/clients/build-client.test.ts" name="BuildClient &gt; getBuilds &gt; should filter by status and result" time="0.000346334">
        </testcase>
        <testcase classname="tests/unit/clients/build-client.test.ts" name="BuildClient &gt; getBuilds &gt; should filter by branch and time range" time="0.00027">
        </testcase>
        <testcase classname="tests/unit/clients/build-client.test.ts" name="BuildClient &gt; getDefinitions &gt; should return definitions with default options" time="0.000236292">
        </testcase>
        <testcase classname="tests/unit/clients/build-client.test.ts" name="BuildClient &gt; getDefinitions &gt; should add wildcards to name filter" time="0.000304917">
        </testcase>
        <testcase classname="tests/unit/clients/build-client.test.ts" name="BuildClient &gt; getDefinitions &gt; should not modify name filter if it already contains wildcards" time="0.000236833">
        </testcase>
        <testcase classname="tests/unit/clients/build-client.test.ts" name="BuildClient &gt; getDefinitions &gt; should handle client-side pagination" time="0.000542875">
        </testcase>
        <testcase classname="tests/unit/clients/build-client.test.ts" name="BuildClient &gt; getDefinitions &gt; should handle continuation token" time="0.000288459">
        </testcase>
        <testcase classname="tests/unit/clients/build-client.test.ts" name="BuildClient &gt; queueBuild &gt; should queue build with minimal options" time="0.0005015">
        </testcase>
        <testcase classname="tests/unit/clients/build-client.test.ts" name="BuildClient &gt; queueBuild &gt; should queue build with all options" time="0.000365042">
        </testcase>
        <testcase classname="tests/unit/clients/build-client.test.ts" name="BuildClient &gt; queueBuild &gt; should handle build queue failure" time="0.000329875">
        </testcase>
        <testcase classname="tests/unit/clients/build-client.test.ts" name="BuildClient &gt; queueBuild &gt; should handle API errors" time="0.002719166">
        </testcase>
        <testcase classname="tests/unit/clients/build-client.test.ts" name="BuildClient &gt; getBuild &gt; should return build for valid ID" time="0.000481209">
        </testcase>
        <testcase classname="tests/unit/clients/build-client.test.ts" name="BuildClient &gt; getBuild &gt; should handle build not found" time="0.00024925">
        </testcase>
        <testcase classname="tests/unit/clients/build-client.test.ts" name="BuildClient &gt; getBuild &gt; should handle API errors" time="0.000260208">
        </testcase>
        <testcase classname="tests/unit/clients/build-client.test.ts" name="BuildClient &gt; listArtifacts &gt; should return artifacts for build" time="0.001951916">
        </testcase>
        <testcase classname="tests/unit/clients/build-client.test.ts" name="BuildClient &gt; listArtifacts &gt; should handle no artifacts" time="0.000466375">
        </testcase>
        <testcase classname="tests/unit/clients/build-client.test.ts" name="BuildClient &gt; listArtifacts &gt; should handle null artifacts response" time="0.000241541">
        </testcase>
        <testcase classname="tests/unit/clients/build-client.test.ts" name="BuildClient &gt; downloadArtifact &gt; should handle artifact not found" time="0.000395416">
        </testcase>
        <testcase classname="tests/unit/clients/build-client.test.ts" name="BuildClient &gt; downloadArtifact &gt; should handle non-pipeline artifacts" time="0.000224583">
        </testcase>
        <testcase classname="tests/unit/clients/build-client.test.ts" name="BuildClient &gt; downloadArtifact &gt; should auto-fetch definition ID when not provided" time="0.000258542">
        </testcase>
        <testcase classname="tests/unit/clients/build-client.test.ts" name="BuildClient &gt; downloadJobLogByName &gt; should handle job not found" time="0.000423625">
        </testcase>
        <testcase classname="tests/unit/clients/build-client.test.ts" name="BuildClient &gt; downloadJobLogByName &gt; should handle job not completed" time="0.000241625">
        </testcase>
        <testcase classname="tests/unit/clients/build-client.test.ts" name="BuildClient &gt; downloadJobLogByName &gt; should handle job with no log" time="0.000235584">
        </testcase>
        <testcase classname="tests/unit/clients/build-client.test.ts" name="BuildClient &gt; downloadJobLogByName &gt; should find job by name" time="0.007096333">
        </testcase>
        <testcase classname="tests/unit/clients/build-client.test.ts" name="BuildClient &gt; downloadLogsByName &gt; should handle multiple matches" time="0.000779583">
        </testcase>
        <testcase classname="tests/unit/clients/build-client.test.ts" name="BuildClient &gt; downloadLogsByName &gt; should find single job by name" time="0.001779">
        </testcase>
        <testcase classname="tests/unit/clients/build-client.test.ts" name="BuildClient &gt; downloadLogsByName &gt; should handle stage logs" time="0.001596625">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/clients/pipeline-client.test.ts" timestamp="2025-08-16T13:32:07.360Z" hostname="Mac.JOOWIN" tests="24" failures="0" errors="0" skipped="0" time="0.011135584">
        <testcase classname="tests/unit/clients/pipeline-client.test.ts" name="PipelineClient &gt; runPipeline &gt; should run pipeline with minimal options" time="0.004267125">
        </testcase>
        <testcase classname="tests/unit/clients/pipeline-client.test.ts" name="PipelineClient &gt; runPipeline &gt; should run pipeline with all options" time="0.000369875">
        </testcase>
        <testcase classname="tests/unit/clients/pipeline-client.test.ts" name="PipelineClient &gt; runPipeline &gt; should handle pipeline run with source branch only" time="0.000194292">
        </testcase>
        <testcase classname="tests/unit/clients/pipeline-client.test.ts" name="PipelineClient &gt; runPipeline &gt; should handle pipeline run failure" time="0.000256084">
        </testcase>
        <testcase classname="tests/unit/clients/pipeline-client.test.ts" name="PipelineClient &gt; runPipeline &gt; should handle API errors" time="0.000196542">
        </testcase>
        <testcase classname="tests/unit/clients/pipeline-client.test.ts" name="PipelineClient &gt; runPipeline &gt; should map pipeline run response correctly" time="0.000187917">
        </testcase>
        <testcase classname="tests/unit/clients/pipeline-client.test.ts" name="PipelineClient &gt; runPipeline &gt; should handle missing pipeline information in response" time="0.0001605">
        </testcase>
        <testcase classname="tests/unit/clients/pipeline-client.test.ts" name="PipelineClient &gt; getPipelineRun &gt; should return pipeline run for valid IDs" time="0.00019225">
        </testcase>
        <testcase classname="tests/unit/clients/pipeline-client.test.ts" name="PipelineClient &gt; getPipelineRun &gt; should handle pipeline run not found" time="0.00013175">
        </testcase>
        <testcase classname="tests/unit/clients/pipeline-client.test.ts" name="PipelineClient &gt; getPipelineRun &gt; should handle API errors" time="0.000149292">
        </testcase>
        <testcase classname="tests/unit/clients/pipeline-client.test.ts" name="PipelineClient &gt; listPipelineRuns &gt; should return list of pipeline runs" time="0.000677458">
        </testcase>
        <testcase classname="tests/unit/clients/pipeline-client.test.ts" name="PipelineClient &gt; listPipelineRuns &gt; should handle empty pipeline runs list" time="0.000305959">
        </testcase>
        <testcase classname="tests/unit/clients/pipeline-client.test.ts" name="PipelineClient &gt; listPipelineRuns &gt; should handle null pipeline runs response" time="0.000185375">
        </testcase>
        <testcase classname="tests/unit/clients/pipeline-client.test.ts" name="PipelineClient &gt; listPipelineRuns &gt; should handle API errors" time="0.000165791">
        </testcase>
        <testcase classname="tests/unit/clients/pipeline-client.test.ts" name="PipelineClient &gt; listPipelineRuns &gt; should pass top parameter when provided" time="0.000183167">
        </testcase>
        <testcase classname="tests/unit/clients/pipeline-client.test.ts" name="PipelineClient &gt; parameter validation &gt; should handle various template parameter types" time="0.000973916">
        </testcase>
        <testcase classname="tests/unit/clients/pipeline-client.test.ts" name="PipelineClient &gt; parameter validation &gt; should handle empty template parameters" time="0.000279334">
        </testcase>
        <testcase classname="tests/unit/clients/pipeline-client.test.ts" name="PipelineClient &gt; parameter validation &gt; should handle empty stages to skip" time="0.000315167">
        </testcase>
        <testcase classname="tests/unit/clients/pipeline-client.test.ts" name="PipelineClient &gt; error handling &gt; should handle network errors" time="0.000178417">
        </testcase>
        <testcase classname="tests/unit/clients/pipeline-client.test.ts" name="PipelineClient &gt; error handling &gt; should handle authentication errors" time="0.000165708">
        </testcase>
        <testcase classname="tests/unit/clients/pipeline-client.test.ts" name="PipelineClient &gt; error handling &gt; should handle timeout errors" time="0.000150083">
        </testcase>
        <testcase classname="tests/unit/clients/pipeline-client.test.ts" name="PipelineClient &gt; error handling &gt; should handle rate limiting errors" time="0.000155125">
        </testcase>
        <testcase classname="tests/unit/clients/pipeline-client.test.ts" name="PipelineClient &gt; initialization &gt; should initialize pipelines API on first use" time="0.000154708">
        </testcase>
        <testcase classname="tests/unit/clients/pipeline-client.test.ts" name="PipelineClient &gt; initialization &gt; should reuse pipelines API on subsequent calls" time="0.000138542">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/clients/task-agent-client.test.ts" timestamp="2025-08-16T13:32:07.362Z" hostname="Mac.JOOWIN" tests="30" failures="0" errors="0" skipped="0" time="0.0155445">
        <testcase classname="tests/unit/clients/task-agent-client.test.ts" name="TaskAgentClient &gt; getQueues &gt; should return formatted queue list on success" time="0.00233575">
        </testcase>
        <testcase classname="tests/unit/clients/task-agent-client.test.ts" name="TaskAgentClient &gt; getQueues &gt; should filter out queues with missing required properties" time="0.000277458">
        </testcase>
        <testcase classname="tests/unit/clients/task-agent-client.test.ts" name="TaskAgentClient &gt; getQueues &gt; should handle empty queue list" time="0.000144">
        </testcase>
        <testcase classname="tests/unit/clients/task-agent-client.test.ts" name="TaskAgentClient &gt; getQueues &gt; should handle API errors" time="0.000212917">
        </testcase>
        <testcase classname="tests/unit/clients/task-agent-client.test.ts" name="TaskAgentClient &gt; getQueue &gt; should find queue by ID" time="0.000204792">
        </testcase>
        <testcase classname="tests/unit/clients/task-agent-client.test.ts" name="TaskAgentClient &gt; getQueue &gt; should find queue by name (case insensitive)" time="0.000162667">
        </testcase>
        <testcase classname="tests/unit/clients/task-agent-client.test.ts" name="TaskAgentClient &gt; getQueue &gt; should return error when queue not found by ID" time="0.000148792">
        </testcase>
        <testcase classname="tests/unit/clients/task-agent-client.test.ts" name="TaskAgentClient &gt; getQueue &gt; should return error when queue not found by name" time="0.000201584">
        </testcase>
        <testcase classname="tests/unit/clients/task-agent-client.test.ts" name="TaskAgentClient &gt; getQueue &gt; should handle queues with missing properties" time="0.000184208">
        </testcase>
        <testcase classname="tests/unit/clients/task-agent-client.test.ts" name="TaskAgentClient &gt; findAgent &gt; should find agents across pools" time="0.000336166">
        </testcase>
        <testcase classname="tests/unit/clients/task-agent-client.test.ts" name="TaskAgentClient &gt; findAgent &gt; should handle agent status mapping" time="0.000209666">
        </testcase>
        <testcase classname="tests/unit/clients/task-agent-client.test.ts" name="TaskAgentClient &gt; findAgent &gt; should skip pools without access" time="0.000203916">
        </testcase>
        <testcase classname="tests/unit/clients/task-agent-client.test.ts" name="TaskAgentClient &gt; findAgent &gt; should handle permission errors at pool level" time="0.000153584">
        </testcase>
        <testcase classname="tests/unit/clients/task-agent-client.test.ts" name="TaskAgentClient &gt; findAgent &gt; should filter agents with missing properties" time="0.000176334">
        </testcase>
        <testcase classname="tests/unit/clients/task-agent-client.test.ts" name="TaskAgentClient &gt; findAgent &gt; should handle no agents found scenario" time="0.000200083">
        </testcase>
        <testcase classname="tests/unit/clients/task-agent-client.test.ts" name="TaskAgentClient &gt; getAgentsByQueue &gt; should return agents for valid queue" time="0.0003425">
        </testcase>
        <testcase classname="tests/unit/clients/task-agent-client.test.ts" name="TaskAgentClient &gt; getAgentsByQueue &gt; should handle queue not found" time="0.000135459">
        </testcase>
        <testcase classname="tests/unit/clients/task-agent-client.test.ts" name="TaskAgentClient &gt; getAgentsByQueue &gt; should handle permission errors" time="0.0001415">
        </testcase>
        <testcase classname="tests/unit/clients/task-agent-client.test.ts" name="TaskAgentClient &gt; getAgentsByQueue &gt; should filter agents with missing properties" time="0.00017625">
        </testcase>
        <testcase classname="tests/unit/clients/task-agent-client.test.ts" name="TaskAgentClient &gt; getAgents &gt; should return all agents from all queues" time="0.005802708">
        </testcase>
        <testcase classname="tests/unit/clients/task-agent-client.test.ts" name="TaskAgentClient &gt; getAgents &gt; should filter by pool name" time="0.000360166">
        </testcase>
        <testcase classname="tests/unit/clients/task-agent-client.test.ts" name="TaskAgentClient &gt; getAgents &gt; should filter by agent name" time="0.000201791">
        </testcase>
        <testcase classname="tests/unit/clients/task-agent-client.test.ts" name="TaskAgentClient &gt; getAgents &gt; should filter by online status" time="0.000190666">
        </testcase>
        <testcase classname="tests/unit/clients/task-agent-client.test.ts" name="TaskAgentClient &gt; getAgents &gt; should handle pagination" time="0.000213875">
        </testcase>
        <testcase classname="tests/unit/clients/task-agent-client.test.ts" name="TaskAgentClient &gt; getAgents &gt; should handle continuation token" time="0.000206417">
        </testcase>
        <testcase classname="tests/unit/clients/task-agent-client.test.ts" name="TaskAgentClient &gt; getAgents &gt; should skip inaccessible pools and continue" time="0.000671084">
            <system-err>
Cannot access agents for queue &apos;Queue-1&apos;: PermissionError: Access denied

Limited results: Could not access agents in 1 pool(s): Queue-1

            </system-err>
        </testcase>
        <testcase classname="tests/unit/clients/task-agent-client.test.ts" name="TaskAgentClient &gt; getAgents &gt; should deduplicate agents by ID" time="0.000201416">
        </testcase>
        <testcase classname="tests/unit/clients/task-agent-client.test.ts" name="TaskAgentClient &gt; getAgents &gt; should sort agents by name" time="0.000183583">
        </testcase>
        <testcase classname="tests/unit/clients/task-agent-client.test.ts" name="TaskAgentClient &gt; getAgents &gt; should handle empty queue list" time="0.000173125">
        </testcase>
        <testcase classname="tests/unit/clients/task-agent-client.test.ts" name="TaskAgentClient &gt; getAgents &gt; should include queue information in agent data" time="0.00043625">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/helpers/mock-factory-usage-example.test.ts" timestamp="2025-08-16T13:32:07.363Z" hostname="Mac.JOOWIN" tests="6" failures="0" errors="0" skipped="0" time="0.005161458">
        <testcase classname="tests/unit/helpers/mock-factory-usage-example.test.ts" name="MockFactory Usage Examples &gt; Testing with Successful Responses &gt; should demonstrate how to test a client with successful API responses" time="0.002731208">
        </testcase>
        <testcase classname="tests/unit/helpers/mock-factory-usage-example.test.ts" name="MockFactory Usage Examples &gt; Testing with Successful Responses &gt; should demonstrate how to test with custom mock data" time="0.000311708">
        </testcase>
        <testcase classname="tests/unit/helpers/mock-factory-usage-example.test.ts" name="MockFactory Usage Examples &gt; Testing with Error Responses &gt; should demonstrate how to test error handling" time="0.00047775">
        </testcase>
        <testcase classname="tests/unit/helpers/mock-factory-usage-example.test.ts" name="MockFactory Usage Examples &gt; Testing with Error Responses &gt; should demonstrate how to test specific error scenarios" time="0.000278458">
        </testcase>
        <testcase classname="tests/unit/helpers/mock-factory-usage-example.test.ts" name="MockFactory Usage Examples &gt; Testing with Multiple Mock Data Sets &gt; should demonstrate how to test pagination scenarios" time="0.000264375">
        </testcase>
        <testcase classname="tests/unit/helpers/mock-factory-usage-example.test.ts" name="MockFactory Usage Examples &gt; Mock Cleanup &gt; should demonstrate proper mock cleanup between tests" time="0.000158459">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/helpers/mock-factory.test.ts" timestamp="2025-08-16T13:32:07.364Z" hostname="Mac.JOOWIN" tests="24" failures="0" errors="0" skipped="0" time="0.00672625">
        <testcase classname="tests/unit/helpers/mock-factory.test.ts" name="MockFactory &gt; WebApi Mock Creation &gt; should create a WebApi mock with all required API getters" time="0.001337">
        </testcase>
        <testcase classname="tests/unit/helpers/mock-factory.test.ts" name="MockFactory &gt; WebApi Mock Creation &gt; should return mocked API instances when getters are called" time="0.0003415">
        </testcase>
        <testcase classname="tests/unit/helpers/mock-factory.test.ts" name="MockFactory &gt; TaskAgentApi Mock Creation &gt; should create a TaskAgentApi mock with all required methods" time="0.000106875">
        </testcase>
        <testcase classname="tests/unit/helpers/mock-factory.test.ts" name="MockFactory &gt; BuildApi Mock Creation &gt; should create a BuildApi mock with all required methods" time="0.000153375">
        </testcase>
        <testcase classname="tests/unit/helpers/mock-factory.test.ts" name="MockFactory &gt; PipelinesApi Mock Creation &gt; should create a PipelinesApi mock with all required methods" time="0.000192667">
        </testcase>
        <testcase classname="tests/unit/helpers/mock-factory.test.ts" name="MockFactory &gt; Mock Response Helpers &gt; should create a realistic mock queue" time="0.000161417">
        </testcase>
        <testcase classname="tests/unit/helpers/mock-factory.test.ts" name="MockFactory &gt; Mock Response Helpers &gt; should create a mock queue with overrides" time="0.000089667">
        </testcase>
        <testcase classname="tests/unit/helpers/mock-factory.test.ts" name="MockFactory &gt; Mock Response Helpers &gt; should create a realistic mock agent" time="0.000144041">
        </testcase>
        <testcase classname="tests/unit/helpers/mock-factory.test.ts" name="MockFactory &gt; Mock Response Helpers &gt; should create a realistic mock build" time="0.000125084">
        </testcase>
        <testcase classname="tests/unit/helpers/mock-factory.test.ts" name="MockFactory &gt; Mock Response Helpers &gt; should create a realistic mock timeline" time="0.000132041">
        </testcase>
        <testcase classname="tests/unit/helpers/mock-factory.test.ts" name="MockFactory &gt; Mock Response Helpers &gt; should create a paged list with continuation token" time="0.000093959">
        </testcase>
        <testcase classname="tests/unit/helpers/mock-factory.test.ts" name="MockFactory &gt; Error Simulation Helpers &gt; should create a permission error with correct properties" time="0.000086333">
        </testcase>
        <testcase classname="tests/unit/helpers/mock-factory.test.ts" name="MockFactory &gt; Error Simulation Helpers &gt; should create a not found error with correct properties" time="0.000077375">
        </testcase>
        <testcase classname="tests/unit/helpers/mock-factory.test.ts" name="MockFactory &gt; Error Simulation Helpers &gt; should create a timeout error with correct properties" time="0.000076083">
        </testcase>
        <testcase classname="tests/unit/helpers/mock-factory.test.ts" name="MockFactory &gt; Error Simulation Helpers &gt; should create an auth error with correct properties" time="0.000145417">
        </testcase>
        <testcase classname="tests/unit/helpers/mock-factory.test.ts" name="MockFactory &gt; Error Simulation Helpers &gt; should create a generic API error with custom status code" time="0.000068292">
        </testcase>
        <testcase classname="tests/unit/helpers/mock-factory.test.ts" name="MockFactory &gt; Setup Helpers &gt; should setup successful mocks with default responses" time="0.000414833">
        </testcase>
        <testcase classname="tests/unit/helpers/mock-factory.test.ts" name="MockFactory &gt; Setup Helpers &gt; should setup error mocks with error responses" time="0.000252666">
        </testcase>
        <testcase classname="tests/unit/helpers/mock-factory.test.ts" name="MockFactory &gt; Utility Methods &gt; should create a mock stream with default content" time="0.00017175">
        </testcase>
        <testcase classname="tests/unit/helpers/mock-factory.test.ts" name="MockFactory &gt; Utility Methods &gt; should create a mock stream with custom content" time="0.000068458">
        </testcase>
        <testcase classname="tests/unit/helpers/mock-factory.test.ts" name="MockFactory &gt; Utility Methods &gt; should create multiple mock queues" time="0.000469417">
        </testcase>
        <testcase classname="tests/unit/helpers/mock-factory.test.ts" name="MockFactory &gt; Utility Methods &gt; should create multiple mock agents with varied properties" time="0.000178209">
        </testcase>
        <testcase classname="tests/unit/helpers/mock-factory.test.ts" name="MockFactory &gt; Utility Methods &gt; should create multiple mock builds with varied properties" time="0.0001945">
        </testcase>
        <testcase classname="tests/unit/helpers/mock-factory.test.ts" name="MockFactory &gt; Utility Methods &gt; should create a complex timeline with multiple record types" time="0.000233958">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/tools/agent-tools.test.ts" timestamp="2025-08-16T13:32:07.365Z" hostname="Mac.JOOWIN" tests="17" failures="0" errors="0" skipped="0" time="0.016829084">
        <testcase classname="tests/unit/tools/agent-tools.test.ts" name="Agent Tools &gt; project_health_check &gt; should return success status without calling any APIs" time="0.003839958">
        </testcase>
        <testcase classname="tests/unit/tools/agent-tools.test.ts" name="Agent Tools &gt; project_health_check &gt; should have correct tool definition" time="0.000186166">
        </testcase>
        <testcase classname="tests/unit/tools/agent-tools.test.ts" name="Agent Tools &gt; project_list_queues &gt; should return queues successfully" time="0.0084315">
        </testcase>
        <testcase classname="tests/unit/tools/agent-tools.test.ts" name="Agent Tools &gt; project_list_queues &gt; should handle API errors" time="0.000287208">
        </testcase>
        <testcase classname="tests/unit/tools/agent-tools.test.ts" name="Agent Tools &gt; project_list_queues &gt; should have correct tool definition" time="0.000117625">
        </testcase>
        <testcase classname="tests/unit/tools/agent-tools.test.ts" name="Agent Tools &gt; project_get_queue &gt; should get queue by ID successfully" time="0.000630583">
        </testcase>
        <testcase classname="tests/unit/tools/agent-tools.test.ts" name="Agent Tools &gt; project_get_queue &gt; should get queue by name successfully" time="0.000269708">
        </testcase>
        <testcase classname="tests/unit/tools/agent-tools.test.ts" name="Agent Tools &gt; project_get_queue &gt; should handle invalid queue ID" time="0.00014975">
        </testcase>
        <testcase classname="tests/unit/tools/agent-tools.test.ts" name="Agent Tools &gt; project_get_queue &gt; should have correct tool definition" time="0.0002495">
        </testcase>
        <testcase classname="tests/unit/tools/agent-tools.test.ts" name="Agent Tools &gt; org_find_agent &gt; should find agent successfully" time="0.00027425">
        </testcase>
        <testcase classname="tests/unit/tools/agent-tools.test.ts" name="Agent Tools &gt; org_find_agent &gt; should handle agent not found" time="0.000145542">
        </testcase>
        <testcase classname="tests/unit/tools/agent-tools.test.ts" name="Agent Tools &gt; org_find_agent &gt; should have correct tool definition" time="0.000116666">
        </testcase>
        <testcase classname="tests/unit/tools/agent-tools.test.ts" name="Agent Tools &gt; org_list_agents &gt; should list agents successfully with default parameters" time="0.0003625">
        </testcase>
        <testcase classname="tests/unit/tools/agent-tools.test.ts" name="Agent Tools &gt; org_list_agents &gt; should list agents with filtering parameters" time="0.000226125">
        </testcase>
        <testcase classname="tests/unit/tools/agent-tools.test.ts" name="Agent Tools &gt; org_list_agents &gt; should group agents by pool correctly" time="0.00023625">
        </testcase>
        <testcase classname="tests/unit/tools/agent-tools.test.ts" name="Agent Tools &gt; org_list_agents &gt; should handle API errors" time="0.00012325">
        </testcase>
        <testcase classname="tests/unit/tools/agent-tools.test.ts" name="Agent Tools &gt; org_list_agents &gt; should have correct tool definition" time="0.000128542">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/tools/build-tools.test.ts" timestamp="2025-08-16T13:32:07.365Z" hostname="Mac.JOOWIN" tests="27" failures="0" errors="0" skipped="0" time="0.015873666">
        <testcase classname="tests/unit/tools/build-tools.test.ts" name="Build Tools &gt; build_get_timeline &gt; should get build timeline successfully" time="0.00271925">
        </testcase>
        <testcase classname="tests/unit/tools/build-tools.test.ts" name="Build Tools &gt; build_get_timeline &gt; should get build timeline with specific timeline ID" time="0.000290041">
        </testcase>
        <testcase classname="tests/unit/tools/build-tools.test.ts" name="Build Tools &gt; build_get_timeline &gt; should handle timeline not found" time="0.000287792">
        </testcase>
        <testcase classname="tests/unit/tools/build-tools.test.ts" name="Build Tools &gt; build_get_timeline &gt; should have correct tool definition" time="0.000183083">
        </testcase>
        <testcase classname="tests/unit/tools/build-tools.test.ts" name="Build Tools &gt; build_list &gt; should list builds with default parameters" time="0.000715583">
        </testcase>
        <testcase classname="tests/unit/tools/build-tools.test.ts" name="Build Tools &gt; build_list &gt; should list builds with filtering parameters" time="0.000275916">
        </testcase>
        <testcase classname="tests/unit/tools/build-tools.test.ts" name="Build Tools &gt; build_list &gt; should handle invalid date format" time="0.000182625">
        </testcase>
        <testcase classname="tests/unit/tools/build-tools.test.ts" name="Build Tools &gt; build_list &gt; should handle invalid date range" time="0.00032375">
        </testcase>
        <testcase classname="tests/unit/tools/build-tools.test.ts" name="Build Tools &gt; build_list &gt; should handle API errors" time="0.000199708">
        </testcase>
        <testcase classname="tests/unit/tools/build-tools.test.ts" name="Build Tools &gt; build_list_definitions &gt; should list build definitions successfully" time="0.000346125">
        </testcase>
        <testcase classname="tests/unit/tools/build-tools.test.ts" name="Build Tools &gt; build_list_definitions &gt; should list definitions with name filter" time="0.000778375">
        </testcase>
        <testcase classname="tests/unit/tools/build-tools.test.ts" name="Build Tools &gt; build_queue &gt; should queue build successfully" time="0.000355417">
        </testcase>
        <testcase classname="tests/unit/tools/build-tools.test.ts" name="Build Tools &gt; build_queue &gt; should handle queue build error" time="0.000202541">
        </testcase>
        <testcase classname="tests/unit/tools/build-tools.test.ts" name="Build Tools &gt; build_download_job_logs &gt; should download job logs successfully" time="0.000255833">
        </testcase>
        <testcase classname="tests/unit/tools/build-tools.test.ts" name="Build Tools &gt; build_download_job_logs &gt; should handle job not found" time="0.000291458">
        </testcase>
        <testcase classname="tests/unit/tools/build-tools.test.ts" name="Build Tools &gt; build_list_artifacts &gt; should list artifacts successfully" time="0.000292458">
        </testcase>
        <testcase classname="tests/unit/tools/build-tools.test.ts" name="Build Tools &gt; build_list_artifacts &gt; should handle no artifacts found" time="0.000205875">
        </testcase>
        <testcase classname="tests/unit/tools/build-tools.test.ts" name="Build Tools &gt; build_download_artifact &gt; should download artifact successfully" time="0.000276541">
        </testcase>
        <testcase classname="tests/unit/tools/build-tools.test.ts" name="Build Tools &gt; build_download_artifact &gt; should handle artifact not found" time="0.000213666">
        </testcase>
        <testcase classname="tests/unit/tools/build-tools.test.ts" name="Build Tools &gt; build_download_logs_by_name &gt; should download logs by name successfully" time="0.000351959">
        </testcase>
        <testcase classname="tests/unit/tools/build-tools.test.ts" name="Build Tools &gt; build_download_logs_by_name &gt; should handle logs not found" time="0.001881208">
        </testcase>
        <testcase classname="tests/unit/tools/build-tools.test.ts" name="Build Tools &gt; list_downloads &gt; should list downloads successfully" time="0.001158333">
        </testcase>
        <testcase classname="tests/unit/tools/build-tools.test.ts" name="Build Tools &gt; list_downloads &gt; should handle empty downloads list" time="0.00044075">
        </testcase>
        <testcase classname="tests/unit/tools/build-tools.test.ts" name="Build Tools &gt; cleanup_downloads &gt; should cleanup downloads successfully" time="0.001103792">
        </testcase>
        <testcase classname="tests/unit/tools/build-tools.test.ts" name="Build Tools &gt; cleanup_downloads &gt; should use default cleanup age" time="0.000400042">
        </testcase>
        <testcase classname="tests/unit/tools/build-tools.test.ts" name="Build Tools &gt; get_download_location &gt; should get download location info successfully" time="0.000277125">
        </testcase>
        <testcase classname="tests/unit/tools/build-tools.test.ts" name="Build Tools &gt; get_download_location &gt; should handle no files in temp directory" time="0.0001945">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/tools/file-management-tools.test.ts" timestamp="2025-08-16T13:32:07.367Z" hostname="Mac.JOOWIN" tests="19" failures="0" errors="0" skipped="0" time="0.008877291">
        <testcase classname="tests/unit/tools/file-management-tools.test.ts" name="File Management Tools &gt; list_downloads &gt; should list downloads with various file types" time="0.003376666">
        </testcase>
        <testcase classname="tests/unit/tools/file-management-tools.test.ts" name="File Management Tools &gt; list_downloads &gt; should handle empty downloads directory" time="0.000690417">
        </testcase>
        <testcase classname="tests/unit/tools/file-management-tools.test.ts" name="File Management Tools &gt; list_downloads &gt; should categorize files correctly" time="0.0002375">
        </testcase>
        <testcase classname="tests/unit/tools/file-management-tools.test.ts" name="File Management Tools &gt; list_downloads &gt; should handle TempManager errors gracefully" time="0.000884833">
        </testcase>
        <testcase classname="tests/unit/tools/file-management-tools.test.ts" name="File Management Tools &gt; list_downloads &gt; should have correct tool definition" time="0.000159959">
        </testcase>
        <testcase classname="tests/unit/tools/file-management-tools.test.ts" name="File Management Tools &gt; cleanup_downloads &gt; should cleanup old files successfully" time="0.000432583">
        </testcase>
        <testcase classname="tests/unit/tools/file-management-tools.test.ts" name="File Management Tools &gt; cleanup_downloads &gt; should use default cleanup age when not specified" time="0.000153292">
        </testcase>
        <testcase classname="tests/unit/tools/file-management-tools.test.ts" name="File Management Tools &gt; cleanup_downloads &gt; should handle cleanup with errors" time="0.000290333">
        </testcase>
        <testcase classname="tests/unit/tools/file-management-tools.test.ts" name="File Management Tools &gt; cleanup_downloads &gt; should handle zero cleanup age" time="0.000128625">
        </testcase>
        <testcase classname="tests/unit/tools/file-management-tools.test.ts" name="File Management Tools &gt; cleanup_downloads &gt; should handle negative cleanup age" time="0.000123875">
        </testcase>
        <testcase classname="tests/unit/tools/file-management-tools.test.ts" name="File Management Tools &gt; cleanup_downloads &gt; should handle TempManager cleanup errors" time="0.000162125">
        </testcase>
        <testcase classname="tests/unit/tools/file-management-tools.test.ts" name="File Management Tools &gt; cleanup_downloads &gt; should have correct tool definition" time="0.000114833">
        </testcase>
        <testcase classname="tests/unit/tools/file-management-tools.test.ts" name="File Management Tools &gt; get_download_location &gt; should get download location info with files present" time="0.000199125">
        </testcase>
        <testcase classname="tests/unit/tools/file-management-tools.test.ts" name="File Management Tools &gt; get_download_location &gt; should handle empty download directory" time="0.000147625">
        </testcase>
        <testcase classname="tests/unit/tools/file-management-tools.test.ts" name="File Management Tools &gt; get_download_location &gt; should handle large directory with many files" time="0.000211333">
        </testcase>
        <testcase classname="tests/unit/tools/file-management-tools.test.ts" name="File Management Tools &gt; get_download_location &gt; should handle fractional age hours correctly" time="0.000111584">
        </testcase>
        <testcase classname="tests/unit/tools/file-management-tools.test.ts" name="File Management Tools &gt; get_download_location &gt; should handle TempManager errors" time="0.000140917">
        </testcase>
        <testcase classname="tests/unit/tools/file-management-tools.test.ts" name="File Management Tools &gt; get_download_location &gt; should have correct tool definition" time="0.000115584">
        </testcase>
        <testcase classname="tests/unit/tools/file-management-tools.test.ts" name="File Management Tools &gt; File Management Tools Integration &gt; should work together for complete file lifecycle" time="0.000194875">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/error-handlers.test.ts" timestamp="2025-08-16T13:32:07.368Z" hostname="Mac.JOOWIN" tests="20" failures="0" errors="0" skipped="0" time="0.004284375">
        <testcase classname="tests/unit/utils/error-handlers.test.ts" name="Error Handlers &gt; createPermissionError &gt; should create permission error for project-level operations" time="0.001124">
        </testcase>
        <testcase classname="tests/unit/utils/error-handlers.test.ts" name="Error Handlers &gt; createPermissionError &gt; should create permission error for organization-level operations" time="0.000088208">
        </testcase>
        <testcase classname="tests/unit/utils/error-handlers.test.ts" name="Error Handlers &gt; createPermissionError &gt; should default to project-level when isOrgLevel is not specified" time="0.000139083">
        </testcase>
        <testcase classname="tests/unit/utils/error-handlers.test.ts" name="Error Handlers &gt; createNotFoundError &gt; should create not found error with string identifier" time="0.000115667">
        </testcase>
        <testcase classname="tests/unit/utils/error-handlers.test.ts" name="Error Handlers &gt; createNotFoundError &gt; should create not found error with numeric identifier" time="0.00006475">
        </testcase>
        <testcase classname="tests/unit/utils/error-handlers.test.ts" name="Error Handlers &gt; createNotFoundError &gt; should handle zero as identifier" time="0.000049167">
        </testcase>
        <testcase classname="tests/unit/utils/error-handlers.test.ts" name="Error Handlers &gt; createApiError &gt; should create API error with message only" time="0.000060167">
        </testcase>
        <testcase classname="tests/unit/utils/error-handlers.test.ts" name="Error Handlers &gt; createApiError &gt; should create API error with message and details" time="0.000053042">
        </testcase>
        <testcase classname="tests/unit/utils/error-handlers.test.ts" name="Error Handlers &gt; createApiError &gt; should handle null details" time="0.000040667">
        </testcase>
        <testcase classname="tests/unit/utils/error-handlers.test.ts" name="Error Handlers &gt; createApiError &gt; should handle undefined details" time="0.000039417">
        </testcase>
        <testcase classname="tests/unit/utils/error-handlers.test.ts" name="Error Handlers &gt; createApiError &gt; should handle complex object details" time="0.000056041">
        </testcase>
        <testcase classname="tests/unit/utils/error-handlers.test.ts" name="Error Handlers &gt; handleAzureDevOpsError &gt; should handle 401 unauthorized error for project-level operation" time="0.00008375">
        </testcase>
        <testcase classname="tests/unit/utils/error-handlers.test.ts" name="Error Handlers &gt; handleAzureDevOpsError &gt; should handle 403 forbidden error for organization-level operation" time="0.000052042">
        </testcase>
        <testcase classname="tests/unit/utils/error-handlers.test.ts" name="Error Handlers &gt; handleAzureDevOpsError &gt; should handle 404 not found error" time="0.000049333">
        </testcase>
        <testcase classname="tests/unit/utils/error-handlers.test.ts" name="Error Handlers &gt; handleAzureDevOpsError &gt; should handle generic API error with status code" time="0.000042584">
        </testcase>
        <testcase classname="tests/unit/utils/error-handlers.test.ts" name="Error Handlers &gt; handleAzureDevOpsError &gt; should handle error without status code" time="0.000042708">
        </testcase>
        <testcase classname="tests/unit/utils/error-handlers.test.ts" name="Error Handlers &gt; handleAzureDevOpsError &gt; should handle error without message" time="0.000043417">
        </testcase>
        <testcase classname="tests/unit/utils/error-handlers.test.ts" name="Error Handlers &gt; handleAzureDevOpsError &gt; should handle unknown error types" time="0.000044417">
        </testcase>
        <testcase classname="tests/unit/utils/error-handlers.test.ts" name="Error Handlers &gt; handleAzureDevOpsError &gt; should handle null error" time="0.0004625">
        </testcase>
        <testcase classname="tests/unit/utils/error-handlers.test.ts" name="Error Handlers &gt; handleAzureDevOpsError &gt; should handle Error instance" time="0.000070333">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/formatters.test.ts" timestamp="2025-08-16T13:32:07.369Z" hostname="Mac.JOOWIN" tests="14" failures="0" errors="0" skipped="0" time="0.002868583">
        <testcase classname="tests/unit/utils/formatters.test.ts" name="Formatters &gt; formatErrorResponse &gt; should format permission error with suggestion" time="0.000936166">
        </testcase>
        <testcase classname="tests/unit/utils/formatters.test.ts" name="Formatters &gt; formatErrorResponse &gt; should format permission error without suggestion" time="0.000087709">
        </testcase>
        <testcase classname="tests/unit/utils/formatters.test.ts" name="Formatters &gt; formatErrorResponse &gt; should format not found error" time="0.000060417">
        </testcase>
        <testcase classname="tests/unit/utils/formatters.test.ts" name="Formatters &gt; formatErrorResponse &gt; should format API error" time="0.000048625">
        </testcase>
        <testcase classname="tests/unit/utils/formatters.test.ts" name="Formatters &gt; formatErrorResponse &gt; should format unknown API error type" time="0.000047958">
        </testcase>
        <testcase classname="tests/unit/utils/formatters.test.ts" name="Formatters &gt; formatErrorResponse &gt; should format Error instance with stack trace" time="0.000134041">
        </testcase>
        <testcase classname="tests/unit/utils/formatters.test.ts" name="Formatters &gt; formatErrorResponse &gt; should format Error instance without stack trace" time="0.000059">
        </testcase>
        <testcase classname="tests/unit/utils/formatters.test.ts" name="Formatters &gt; formatErrorResponse &gt; should format string error" time="0.000049375">
        </testcase>
        <testcase classname="tests/unit/utils/formatters.test.ts" name="Formatters &gt; formatErrorResponse &gt; should format number error" time="0.000045">
        </testcase>
        <testcase classname="tests/unit/utils/formatters.test.ts" name="Formatters &gt; formatErrorResponse &gt; should format null error" time="0.000042917">
        </testcase>
        <testcase classname="tests/unit/utils/formatters.test.ts" name="Formatters &gt; formatErrorResponse &gt; should format undefined error" time="0.000040625">
        </testcase>
        <testcase classname="tests/unit/utils/formatters.test.ts" name="Formatters &gt; formatErrorResponse &gt; should format complex object error" time="0.000073667">
        </testcase>
        <testcase classname="tests/unit/utils/formatters.test.ts" name="Formatters &gt; formatErrorResponse &gt; should format array error" time="0.000051041">
        </testcase>
        <testcase classname="tests/unit/utils/formatters.test.ts" name="Formatters &gt; formatErrorResponse &gt; should handle circular reference in object" time="0.0004115">
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/temp-manager.test.ts" timestamp="2025-08-16T13:32:07.370Z" hostname="Mac.JOOWIN" tests="23" failures="0" errors="0" skipped="0" time="0.010745416">
        <testcase classname="tests/unit/utils/temp-manager.test.ts" name="TempManager &gt; Singleton Pattern &gt; should return the same instance" time="0.001037042">
        </testcase>
        <testcase classname="tests/unit/utils/temp-manager.test.ts" name="TempManager &gt; initialize &gt; should create temp directory structure on first initialization" time="0.002356042">
            <system-err>
Warning: Failed to scan for old temp directories: entries is not iterable

            </system-err>
        </testcase>
        <testcase classname="tests/unit/utils/temp-manager.test.ts" name="TempManager &gt; initialize &gt; should not reinitialize if already initialized" time="0.00034">
            <system-err>
Warning: Failed to scan for old temp directories: entries is not iterable

            </system-err>
        </testcase>
        <testcase classname="tests/unit/utils/temp-manager.test.ts" name="TempManager &gt; initialize &gt; should throw error if initialization fails" time="0.000683958">
        </testcase>
        <testcase classname="tests/unit/utils/temp-manager.test.ts" name="TempManager &gt; initialize &gt; should clean up old temp directories during initialization" time="0.000455208">
            <system-err>
Cleaned up orphaned temp directory: /tmp/ado-mcp-server-999-old

Cleaned up orphaned temp directory: /tmp/ado-mcp-server-888-old2

            </system-err>
        </testcase>
        <testcase classname="tests/unit/utils/temp-manager.test.ts" name="TempManager &gt; getTempDir &gt; should return temp directory after initialization" time="0.000195">
            <system-err>
Warning: Failed to scan for old temp directories: entries is not iterable

            </system-err>
        </testcase>
        <testcase classname="tests/unit/utils/temp-manager.test.ts" name="TempManager &gt; getTempDir &gt; should initialize if not already initialized" time="0.000187542">
            <system-err>
Warning: Failed to scan for old temp directories: entries is not iterable

            </system-err>
        </testcase>
        <testcase classname="tests/unit/utils/temp-manager.test.ts" name="TempManager &gt; getDownloadPath &gt; should create valid download path for logs" time="0.00028125">
            <system-err>
Warning: Failed to scan for old temp directories: entries is not iterable

            </system-err>
        </testcase>
        <testcase classname="tests/unit/utils/temp-manager.test.ts" name="TempManager &gt; getDownloadPath &gt; should create valid download path for artifacts" time="0.000306417">
            <system-err>
Warning: Failed to scan for old temp directories: entries is not iterable

            </system-err>
        </testcase>
        <testcase classname="tests/unit/utils/temp-manager.test.ts" name="TempManager &gt; getDownloadPath &gt; should sanitize filename with special characters" time="0.00020025">
            <system-err>
Warning: Failed to scan for old temp directories: entries is not iterable

            </system-err>
        </testcase>
        <testcase classname="tests/unit/utils/temp-manager.test.ts" name="TempManager &gt; getDownloadPath &gt; should throw error for invalid buildId" time="0.000470458">
            <system-err>
Warning: Failed to scan for old temp directories: entries is not iterable

            </system-err>
        </testcase>
        <testcase classname="tests/unit/utils/temp-manager.test.ts" name="TempManager &gt; getDownloadPath &gt; should throw error for invalid category" time="0.000215833">
            <system-err>
Warning: Failed to scan for old temp directories: entries is not iterable

            </system-err>
        </testcase>
        <testcase classname="tests/unit/utils/temp-manager.test.ts" name="TempManager &gt; getDownloadPath &gt; should throw error for invalid filename" time="0.000262833">
            <system-err>
Warning: Failed to scan for old temp directories: entries is not iterable

            </system-err>
        </testcase>
        <testcase classname="tests/unit/utils/temp-manager.test.ts" name="TempManager &gt; listDownloads &gt; should list downloads from both categories" time="0.000540875">
            <system-err>
Warning: Failed to scan for old temp directories: entries is not iterable

            </system-err>
        </testcase>
        <testcase classname="tests/unit/utils/temp-manager.test.ts" name="TempManager &gt; listDownloads &gt; should handle missing category directories gracefully" time="0.000223167">
            <system-err>
Warning: Failed to scan for old temp directories: entries is not iterable

            </system-err>
        </testcase>
        <testcase classname="tests/unit/utils/temp-manager.test.ts" name="TempManager &gt; listDownloads &gt; should handle missing downloads directory gracefully" time="0.000264083">
            <system-err>
Warning: Failed to scan for old temp directories: entries is not iterable

Warning: Failed to process category artifacts: buildDirs is not iterable

            </system-err>
        </testcase>
        <testcase classname="tests/unit/utils/temp-manager.test.ts" name="TempManager &gt; listDownloads &gt; should skip non-file entries" time="0.000246083">
            <system-err>
Warning: Failed to scan for old temp directories: entries is not iterable

            </system-err>
        </testcase>
        <testcase classname="tests/unit/utils/temp-manager.test.ts" name="TempManager &gt; cleanup &gt; should remove files older than specified hours" time="0.000353083">
            <system-err>
Warning: Failed to scan for old temp directories: entries is not iterable

            </system-err>
        </testcase>
        <testcase classname="tests/unit/utils/temp-manager.test.ts" name="TempManager &gt; cleanup &gt; should handle file removal errors" time="0.000242292">
            <system-err>
Warning: Failed to scan for old temp directories: entries is not iterable

            </system-err>
        </testcase>
        <testcase classname="tests/unit/utils/temp-manager.test.ts" name="TempManager &gt; cleanup &gt; should remove empty parent directories" time="0.000232375">
            <system-err>
Warning: Failed to scan for old temp directories: entries is not iterable

            </system-err>
        </testcase>
        <testcase classname="tests/unit/utils/temp-manager.test.ts" name="TempManager &gt; cleanup &gt; should not remove non-empty parent directories" time="0.000226042">
            <system-err>
Warning: Failed to scan for old temp directories: entries is not iterable

            </system-err>
        </testcase>
        <testcase classname="tests/unit/utils/temp-manager.test.ts" name="TempManager &gt; getTempDirInfo &gt; should return temp directory information" time="0.000289458">
            <system-err>
Warning: Failed to scan for old temp directories: entries is not iterable

            </system-err>
        </testcase>
        <testcase classname="tests/unit/utils/temp-manager.test.ts" name="TempManager &gt; getTempDirInfo &gt; should handle empty downloads directory" time="0.000217958">
            <system-err>
Warning: Failed to scan for old temp directories: entries is not iterable

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="tests/unit/utils/validators.test.ts" timestamp="2025-08-16T13:32:07.371Z" hostname="Mac.JOOWIN" tests="73" failures="0" errors="0" skipped="0" time="0.004309583">
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; ensureString &gt; should return string value as-is" time="0.000666875">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; ensureString &gt; should return default for null" time="0.0000635">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; ensureString &gt; should return default for undefined" time="0.000043041">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; ensureString &gt; should convert number to string" time="0.000036542">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; ensureString &gt; should convert boolean to string" time="0.000046334">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; ensureString &gt; should convert object to string" time="0.000034375">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; ensureString &gt; should convert array to string" time="0.00003325">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; ensureString &gt; should handle empty string" time="0.000036458">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; ensureNumber &gt; should return valid number as-is" time="0.000053208">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; ensureNumber &gt; should return default for null" time="0.000034042">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; ensureNumber &gt; should return default for undefined" time="0.000031667">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; ensureNumber &gt; should convert string number to number" time="0.000043084">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; ensureNumber &gt; should return default for invalid string" time="0.000031291">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; ensureNumber &gt; should return default for NaN" time="0.000030458">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; ensureNumber &gt; should handle zero" time="0.000028875">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; ensureNumber &gt; should handle negative numbers" time="0.000028625">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; ensureNumber &gt; should handle Infinity" time="0.00003">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; ensureNumber &gt; should convert boolean to number" time="0.00003975">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; safeAccess &gt; should access nested property safely" time="0.000054875">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; safeAccess &gt; should return default for null object" time="0.000119291">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; safeAccess &gt; should return default for undefined object" time="0.000036542">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; safeAccess &gt; should return default when accessor throws" time="0.000054875">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; safeAccess &gt; should handle deep nested access" time="0.00003925">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; safeAccess &gt; should handle array access" time="0.000037792">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; safeAccess &gt; should return default for out of bounds array access" time="0.000042083">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; isNonEmptyString &gt; should return true for non-empty string" time="0.000043">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; isNonEmptyString &gt; should return false for empty string" time="0.000029833">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; isNonEmptyString &gt; should return false for whitespace-only string" time="0.000028958">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; isNonEmptyString &gt; should return false for null" time="0.000026875">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; isNonEmptyString &gt; should return false for undefined" time="0.000026458">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; isNonEmptyString &gt; should return false for number" time="0.000026375">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; isNonEmptyString &gt; should return false for boolean" time="0.000025667">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; isNonEmptyString &gt; should return false for object" time="0.000026542">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; isNonEmptyString &gt; should return true for string with content after trim" time="0.000028042">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; isValidNumber &gt; should return true for valid positive number" time="0.000038792">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; isValidNumber &gt; should return true for valid negative number" time="0.000027166">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; isValidNumber &gt; should return true for zero" time="0.000026375">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; isValidNumber &gt; should return true for decimal number" time="0.00002775">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; isValidNumber &gt; should return false for NaN" time="0.000027042">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; isValidNumber &gt; should return false for Infinity" time="0.000026291">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; isValidNumber &gt; should return false for -Infinity" time="0.0000265">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; isValidNumber &gt; should return false for string" time="0.000025833">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; isValidNumber &gt; should return false for null" time="0.000026542">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; isValidNumber &gt; should return false for undefined" time="0.000026291">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; isValidNumber &gt; should return false for boolean" time="0.000025792">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; hasRequiredProperties &gt; should return true when all required properties exist" time="0.000058042">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; hasRequiredProperties &gt; should return false when required property is missing" time="0.000032042">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; hasRequiredProperties &gt; should return false when required property is undefined" time="0.0000325">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; hasRequiredProperties &gt; should return true when required property is null" time="0.000030042">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; hasRequiredProperties &gt; should return true when required property is false" time="0.000030875">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; hasRequiredProperties &gt; should return true when required property is 0" time="0.000029791">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; hasRequiredProperties &gt; should return true when required property is empty string" time="0.0000295">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; hasRequiredProperties &gt; should return false for null object" time="0.000026875">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; hasRequiredProperties &gt; should return false for undefined object" time="0.000026667">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; hasRequiredProperties &gt; should return false for non-object" time="0.000027125">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; hasRequiredProperties &gt; should return true for empty required properties array" time="0.000028792">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; safeStringCompare &gt; should compare strings case-sensitively by default" time="0.000058792">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; safeStringCompare &gt; should compare strings case-insensitively when specified" time="0.000037584">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; safeStringCompare &gt; should compare strings case-sensitively when specified" time="0.000036041">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; safeStringCompare &gt; should convert non-strings to strings before comparison" time="0.0000445">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; safeStringCompare &gt; should handle null and undefined" time="0.00004325">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; safeStringCompare &gt; should handle mixed case with case-insensitive comparison" time="0.000028291">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; safeStringCompare &gt; should handle empty strings" time="0.000035833">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; safeStringCompare &gt; should handle whitespace" time="0.000035417">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; clampNumber &gt; should return value when within range" time="0.000040166">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; clampNumber &gt; should return min when value is below range" time="0.000027833">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; clampNumber &gt; should return max when value is above range" time="0.000026416">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; clampNumber &gt; should return min when value equals min" time="0.000027875">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; clampNumber &gt; should return max when value equals max" time="0.000026166">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; clampNumber &gt; should handle negative ranges" time="0.00004525">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; clampNumber &gt; should handle decimal numbers" time="0.000043458">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; clampNumber &gt; should handle zero values" time="0.000042208">
        </testcase>
        <testcase classname="tests/unit/utils/validators.test.ts" name="Validators &gt; clampNumber &gt; should handle same min and max" time="0.000034459">
        </testcase>
    </testsuite>
</testsuites>
